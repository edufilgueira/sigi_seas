# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Recursoshumanos::ContratosController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Recursoshumanos::Contrato. As you add validations to Recursoshumanos::Contrato, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      recursoshumanos_tipo_legal_id: FactoryBot.create(:recursoshumanos_tipo_legal).id,
      recursoshumanos_tipo_vinculo_id: FactoryBot.create(:recursoshumanos_tipo_vinculo).id,
      inicio: 'MyString',
      numero: 1,
      ano: 1,
      doe_ce: 12_345,
      data_doe_ce: '2018-01-17',
      pagina_doe_ce: 1,
      inicio_vigencia: '2018-01-17',
      final_vigencia: '2018-01-17'
    }
  end

  let(:invalid_attributes) do
    {
      inicio: '',
      numero: 1,
      ano: 1,
      doe_ce: '',
      data_doe_ce: '2018-01-17',
      pagina_doe_ce: 1,
      inicio_vigencia: '2018-01-17',
      final_vigencia: '2018-01-17'
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Recursoshumanos::ContratosController. Be sure to keep this updated too.
  stub_sign_in
  let(:valid_session) { {} }

  describe 'class tests' do
    it 'is a kind of AdminApplicationController' do
      expect(described_class.new).to be_kind_of(AdminApplicationController)
    end
  end

  describe 'GET #index' do
    it 'returns a success response' do
      contrato = Recursoshumanos::Contrato.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      contrato = Recursoshumanos::Contrato.create! valid_attributes
      get :show, params: { id: contrato.to_param }, session: valid_session
      expect(response).to be_success
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      contrato = Recursoshumanos::Contrato.create! valid_attributes
      get :edit, params: { id: contrato.to_param }, session: valid_session
      expect(response).to be_success
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Recursoshumanos::Contrato' do
        expect do
          post :create, params: { recursoshumanos_contrato: valid_attributes }, session: valid_session
        end.to change(Recursoshumanos::Contrato, :count).by(1)
      end

      it 'redirects to the created recursoshumanos_contrato' do
        post :create, params: { recursoshumanos_contrato: valid_attributes }, session: valid_session
        expect(response).to redirect_to(recursoshumanos_contratos_path)
        expect(flash[:notice]).to be_eql(I18n.t('messages.cadastro_sucesso'))
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: { recursoshumanos_contrato: invalid_attributes }, session: valid_session
        expect(response).to be_success
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested recursoshumanos_contrato' do
        contrato = Recursoshumanos::Contrato.create! valid_attributes
        put :update, params: { id: contrato.to_param, recursoshumanos_contrato: new_attributes }, session: valid_session
        contrato.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the recursoshumanos_contrato' do
        contrato = Recursoshumanos::Contrato.create! valid_attributes
        put :update, params: { id: contrato.to_param, recursoshumanos_contrato: valid_attributes }, session: valid_session

        expect(response).to redirect_to(recursoshumanos_contratos_path)
        expect(flash[:notice]).to be_eql(I18n.t('messages.atualizado_sucesso'))
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'edit' template)" do
        contrato = Recursoshumanos::Contrato.create! valid_attributes
        put :update, params: { id: contrato.to_param, recursoshumanos_contrato: invalid_attributes }, session: valid_session
        expect(response).to be_success
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested recursoshumanos_contrato' do
      contrato = Recursoshumanos::Contrato.create! valid_attributes
      expect do
        delete :destroy, params: { id: contrato.to_param }, session: valid_session
      end.to change(Recursoshumanos::Contrato, :count).by(-1)
    end

    it 'redirects to the recursoshumanos_contratos list' do
      contrato = Recursoshumanos::Contrato.create! valid_attributes
      delete :destroy, params: { id: contrato.to_param }, session: valid_session
      expect(response).to redirect_to(recursoshumanos_contratos_url)
    end
  end
end
