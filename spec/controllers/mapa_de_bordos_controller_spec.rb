# -*- coding: utf-8 -*-
# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe MapaDeBordosController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # MapaDeBordo. As you add validations to MapaDeBordo, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      veiculo_id: FactoryBot.create(:veiculo).id,
      tipo_vistoria: 'Diária',
      responsavel_id: FactoryBot.create(:pessoa_motorista).id,
      motorista_id: FactoryBot.create(:pessoa).id,
      km_inicial: 3.5,
      km_final: 4.5,
      percurso: 'MyText',
      parecer: 'MyText'
    }
  end

  let(:invalid_attributes) do
      {
        veiculo_id: nil,
	      tipo_vistoria: 'Diária',
        responsavel: nil,
        motorista: nil,
        km_inicial: 3.5,
        km_final: 4.5,
        percurso: nil,
        parecer: 'MyText'
      }
    end

  stub_sign_in
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MapaDeBordosController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'returns a success response' do
      mapa_de_bordo = MapaDeBordo.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_success
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      mapa_de_bordo = MapaDeBordo.create! valid_attributes
      get :show, params: { id: mapa_de_bordo.to_param }, session: valid_session
      expect(response).to be_success
    end
  end

  #describe 'GET #new' do
  #  it 'returns a success response' do
  #    get :new, params: {}, session: valid_session
  #    expect(response).to be_success
  #  end
  #end

  describe 'GET #edit' do
    it 'returns a success response' do
      mapa_de_bordo = MapaDeBordo.create! valid_attributes
      get :edit, params: { id: mapa_de_bordo.to_param }, session: valid_session
      expect(response).to be_success
    end
  end

  # describe 'POST #create' do
  #   context 'with valid params' do
  #     it 'creates a new MapaDeBordo' do
  #       expect do
  #         post :create, params: { mapa_de_bordo: valid_attributes }, session: valid_session
  #       end.to change(MapaDeBordo, :count).by(1)
  #     end

  #     it 'redirects to the created mapa_de_bordo' do
  #       post :create, params: { mapa_de_bordo: valid_attributes }, session: valid_session
  #       expect(response).to redirect_to(mapa_de_bordos_url)
  #     end
  #   end

  #   context 'with invalid params' do
  #     it "returns a success response (i.e. to display the 'new' template)" do
  #       post :create, params: { mapa_de_bordo: invalid_attributes }, session: valid_session
  #       expect(response).to be_success
  #     end
  #   end
  # end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested mapa_de_bordo' do
        mapa_de_bordo = MapaDeBordo.create! valid_attributes
        put :update, params: { id: mapa_de_bordo.to_param, mapa_de_bordo: new_attributes }, session: valid_session
        mapa_de_bordo.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the mapa_de_bordo' do
        mapa_de_bordo = MapaDeBordo.create! valid_attributes
        put :update, params: { id: mapa_de_bordo.to_param, mapa_de_bordo: valid_attributes }, session: valid_session
        expect(response).to redirect_to(mapa_de_bordos_url)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'edit' template)" do
        mapa_de_bordo = MapaDeBordo.create! valid_attributes
        put :update, params: { id: mapa_de_bordo.to_param, mapa_de_bordo: invalid_attributes }, session: valid_session
        expect(response).to be_success
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested mapa_de_bordo' do
      mapa_de_bordo = MapaDeBordo.create! valid_attributes
      expect do
        delete :destroy, params: { id: mapa_de_bordo.to_param }, session: valid_session
      end.to change(MapaDeBordo, :count).by(-1)
    end

    it 'redirects to the mapa_de_bordos list' do
      mapa_de_bordo = MapaDeBordo.create! valid_attributes
      delete :destroy, params: { id: mapa_de_bordo.to_param }, session: valid_session
      expect(response).to redirect_to(mapa_de_bordos_url)
    end
  end
end
